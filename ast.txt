Module(
	body=[
		Import(
			names=[
				alias(
					name='ast'
				)
			]
		),
		Import(
			names=[
				alias(
					name='sys'
				)
			]
		),
		FunctionDef(
			name='read_file',
			args=arguments(
				posonlyargs=[],
				args=[
					arg(
						arg='path'
					)
				],
				kwonlyargs=[],
				kw_defaults=[],
				defaults=[]
			),
			body=[
				Assign(
					targets=[
						Name(
							id='file',
							ctx=Store()
						)
					],
					value=Constant(
						value=''
					)
				),
				With(
					items=[
						withitem(
							context_expr=Call(
								func=Name(
									id='open',
									ctx=Load()
								),
								args=[
									Name(
										id='path',
										ctx=Load()
									)
								],
								keywords=[]
							),
							optional_vars=Name(
								id='f',
								ctx=Store()
							)
						)
					],
					body=[
						For(
							target=Name(
								id='line',
								ctx=Store()
							),
							iter=Name(
								id='f',
								ctx=Load()
							),
							body=[
								AugAssign(
									target=Name(
										id='file',
										ctx=Store()
									),
									op=Add(),
									value=BinOp(
										left=Name(
											id='line',
											ctx=Load()
										),
										op=Add(),
										right=Constant(
											value='\n'
										)
									)
								)
							],
							orelse=[]
						)
					]
				),
				Return(
					value=Name(
						id='file',
						ctx=Load()
					)
				)
			],
			decorator_list=[],
			type_params=[]
		),
		FunctionDef(
			name='get_contents',
			args=arguments(
				posonlyargs=[],
				args=[
					arg(
						arg='tree'
					)
				],
				kwonlyargs=[],
				kw_defaults=[],
				defaults=[]
			),
			body=[
				Assign(
					targets=[
						Name(
							id='result',
							ctx=Store()
						)
					],
					value=Call(
						func=Attribute(
							value=Name(
								id='ast',
								ctx=Load()
							),
							attr='dump',
							ctx=Load()
						),
						args=[
							Name(
								id='tree',
								ctx=Load()
							)
						],
						keywords=[]
					)
				),
				Return(
					value=Name(
						id='result',
						ctx=Load()
					)
				)
			],
			decorator_list=[],
			type_params=[]
		),
		FunctionDef(
			name='write_file',
			args=arguments(
				posonlyargs=[],
				args=[
					arg(
						arg='path'
					),
					arg(
						arg='contents'
					)
				],
				kwonlyargs=[],
				kw_defaults=[],
				defaults=[]
			),
			body=[
				With(
					items=[
						withitem(
							context_expr=Call(
								func=Name(
									id='open',
									ctx=Load()
								),
								args=[
									Name(
										id='path',
										ctx=Load()
									),
									Constant(
										value='w'
									)
								],
								keywords=[]
							),
							optional_vars=Name(
								id='f',
								ctx=Store()
							)
						)
					],
					body=[
						Expr(
							value=Call(
								func=Attribute(
									value=Name(
										id='f',
										ctx=Load()
									),
									attr='write',
									ctx=Load()
								),
								args=[
									Name(
										id='contents',
										ctx=Load()
									)
								],
								keywords=[]
							)
						)
					]
				)
			],
			decorator_list=[],
			type_params=[]
		),
		FunctionDef(
			name='main',
			args=arguments(
				posonlyargs=[],
				args=[
					arg(
						arg='args'
					)
				],
				kwonlyargs=[],
				kw_defaults=[],
				defaults=[]
			),
			body=[
				If(
					test=Compare(
						left=Call(
							func=Name(
								id='len',
								ctx=Load()
							),
							args=[
								Name(
									id='args',
									ctx=Load()
								)
							],
							keywords=[]
						),
						ops=[
							Gt()
						],
						comparators=[
							Constant(
								value=1
							)
						]
					),
					body=[
						Assign(
							targets=[
								Name(
									id='file',
									ctx=Store()
								)
							],
							value=Call(
								func=Name(
									id='read_file',
									ctx=Load()
								),
								args=[
									Subscript(
										value=Name(
											id='args',
											ctx=Load()
										),
										slice=Constant(
											value=1
										),
										ctx=Load()
									)
								],
								keywords=[]
							)
						),
						Assign(
							targets=[
								Name(
									id='tree',
									ctx=Store()
								)
							],
							value=Call(
								func=Attribute(
									value=Name(
										id='ast',
										ctx=Load()
									),
									attr='parse',
									ctx=Load()
								),
								args=[
									Name(
										id='file',
										ctx=Load()
									)
								],
								keywords=[]
							)
						),
						Assign(
							targets=[
								Name(
									id='contents',
									ctx=Store()
								)
							],
							value=Call(
								func=Name(
									id='get_contents',
									ctx=Load()
								),
								args=[
									Name(
										id='tree',
										ctx=Load()
									)
								],
								keywords=[]
							)
						),
						Expr(
							value=Call(
								func=Name(
									id='print',
									ctx=Load()
								),
								args=[
									Name(
										id='contents',
										ctx=Load()
									)
								],
								keywords=[]
							)
						)
					],
					orelse=[
						Expr(
							value=Call(
								func=Name(
									id='print',
									ctx=Load()
								),
								args=[
									Constant(
										value='Usage: pytype <filepath>'
									)
								],
								keywords=[]
							)
						)
					]
				)
			],
			decorator_list=[],
			type_params=[]
		),
		If(
			test=Compare(
				left=Name(
					id='__name__',
					ctx=Load()
				),
				ops=[
					Eq()
				],
				comparators=[
					Constant(
						value='__main__'
					)
				]
			),
			body=[
				Assign(
					targets=[
						Name(
							id='args',
							ctx=Store()
						)
					],
					value=Attribute(
						value=Name(
							id='sys',
							ctx=Load()
						),
						attr='argv',
						ctx=Load()
					)
				),
				Expr(
					value=Call(
						func=Name(
							id='main',
							ctx=Load()
						),
						args=[
							Name(
								id='args',
								ctx=Load()
							)
						],
						keywords=[]
					)
				)
			],
			orelse=[]
		)
	],
	type_ignores=[]
)
